
services:
 zookeeper:
   ports:
     - 22181:2181
   container_name: zookeeper
   networks:
     - confluent
   image: confluentinc/cp-zookeeper:7.4.4
   environment:
     ZOOKEEPER_CLIENT_PORT: 2181

 kafka-1:
   image: confluentinc/cp-kafka:7.4.4
   container_name: kafka-1
   networks:
     - confluent
   expose:
     - 9092
     - 9093
   depends_on:
     - zookeeper
   environment:
     KAFKA_BROKER_ID: 1
     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,SSL://0.0.0.0:9093
     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL
     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,SSL://kafka-1:9093
     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
     KAFKA_SSL_KEYSTORE_FILENAME: kafka-server-1.jks
     KAFKA_SSL_KEYSTORE_PASSWORD: password
     KAFKA_SSL_TRUSTSTORE_FILENAME: truststore.jks
     KAFKA_SSL_TRUSTSTORE_CREDENTIALS: credentials
     KAFKA_SSL_KEYSTORE_CREDENTIALS: credentials
     KAFKA_SSL_KEY_PASSWORD: password
     KAFKA_SSL_CLIENT_AUTH: required
     KAFKA_SSL_KEY_CREDENTIALS: credentials
   volumes:
        - ./kafka-certs:/etc/kafka/secrets
   healthcheck:
     test: kafka-topics --list --bootstrap-server localhost:9092 || exit 1
     interval: 1s
     timeout: 60s
     retries: 60

 kafka-2:
   image: confluentinc/cp-kafka:7.4.4
   container_name: kafka-2
   networks:
     - confluent
   expose:
     - 9094
     - 9095
   depends_on:
     - zookeeper
   environment:
     KAFKA_BROKER_ID: 2
     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094,SSL://0.0.0.0:9095
     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL
     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9094,SSL://kafka-2:9095
     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
     KAFKA_SSL_KEYSTORE_FILENAME: kafka-server-2.jks
     KAFKA_SSL_KEYSTORE_PASSWORD: password
     KAFKA_SSL_TRUSTSTORE_FILENAME: truststore.jks
     KAFKA_SSL_TRUSTSTORE_CREDENTIALS: credentials
     KAFKA_SSL_KEYSTORE_CREDENTIALS: credentials
     KAFKA_SSL_KEY_PASSWORD: password
     KAFKA_SSL_CLIENT_AUTH: required
     KAFKA_SSL_KEY_CREDENTIALS: credentials
   volumes:
     - ./kafka-certs:/etc/kafka/secrets
   healthcheck:
     test: kafka-topics --list --bootstrap-server localhost:9094 || exit 1
     interval: 1s
     timeout: 60s
     retries: 60

 kafka-3:
   image: confluentinc/cp-kafka:7.4.4
   container_name: kafka-3
   networks:
     - confluent
   expose:
     - 9096
     - 9097
   depends_on:
     - zookeeper
   environment:
     KAFKA_BROKER_ID: 3
     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9096,SSL://0.0.0.0:9097
     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL
     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9096,SSL://kafka-3:9097
     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
     KAFKA_SSL_KEYSTORE_FILENAME: kafka-server-3.jks
     KAFKA_SSL_KEYSTORE_PASSWORD: password
     KAFKA_SSL_TRUSTSTORE_FILENAME: truststore.jks
     KAFKA_SSL_TRUSTSTORE_CREDENTIALS: credentials
     KAFKA_SSL_KEYSTORE_CREDENTIALS: credentials
     KAFKA_SSL_KEY_PASSWORD: password
     KAFKA_SSL_CLIENT_AUTH: required
     KAFKA_SSL_KEY_CREDENTIALS: credentials
   volumes:
     - ./kafka-certs:/etc/kafka/secrets
   healthcheck:
     test: kafka-topics --list --bootstrap-server localhost:9096 || exit 1
     interval: 1s
     timeout: 60s
     retries: 60

 producer:
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    volumes:
      - ./kafka-certs/:/data/app/certs
    networks:
      - confluent
    entrypoint: ["python", "/data/app/producer.py"]

 consumer:
   build:
     context: ./
     dockerfile: Dockerfile
   depends_on:
     kafka-1:
       condition: service_healthy
     kafka-2:
       condition: service_healthy
     kafka-3:
       condition: service_healthy
   volumes:
     - ./kafka-certs/:/data/app/certs
   networks:
     - confluent
   entrypoint: ["python", "/data/app/consumer.py"]

networks:
 confluent:
   driver: bridge
